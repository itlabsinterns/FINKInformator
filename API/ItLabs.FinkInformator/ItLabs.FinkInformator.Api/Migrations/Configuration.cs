using ItLabs.FinkInformator.Api.Models;
using System;
using System.Collections.Generic;
using System.Data.Entity.Migrations;

namespace ItLabs.FinkInformator.Api.Migrations
{
    internal sealed class Configuration : DbMigrationsConfiguration<SchoolContext>
    {
        public Configuration()
        {
            AutomaticMigrationsEnabled = true;
        }

        protected override void Seed(SchoolContext context)
        {
            //Try this
            //context.Programs.RemoveRange(context.Programs);
            //context.Programs.AddRange(FillPrograms(context));

            //context.Courses.RemoveRange(context.Courses);
            //context.Courses.AddRange(FillCourses(context));

            // context.ProgramsCourses.RemoveRange(context.ProgramsCourses);
            // FillProgramsCourses(context);

            //TODO remove all prerequisites before adding them again
            AddCoursePrerequisite(context, 167, 162);
            context.SaveChanges();
        }

        private void AddCoursePrerequisite(SchoolContext context, int courseId, int prerequisiteId)
        {
            Course course = context.Courses.Find(courseId);
            Course prerequisite = context.Courses.Find(prerequisiteId);
            context.CoursesPrerequisites.Add(new CoursesPrerequisites()
            {
                Course=course,
                Prerequisite=prerequisite
            });
        }

        private List<Program> FillPrograms(SchoolContext context)
        {
            var programs = new List<Program>();
            foreach (var item in Enum.GetValues(typeof(Enums.Program)))
            {
                var programName = item.ToString();

                programs.Add(new Program
                {
                    ProgramName = programName
                });
                

            }

            return programs;
        }
        private List<Course> FillCourses(SchoolContext context)
        {
            //later
            //    var program = context.Programs.SingleOrDefault(x => x.ProgramName == programName);

            //    if (program == null)
            //        return;

            //    var courses = context.ProgramsCourses
            //           .Include(x => x.)
            //           .Where(x => x.Program.ProgramId == program.ProgramId)
            //           .Select(x => new Course
            //           {

            //           })
            //           .ToList();
            List<Course> response = new List<Course>();
            //Most Common Mandatoiry Courses
            response.Add(new Course() { CourseName = "Калкулус 1", Semester = 1, CourseDescription = "Предметот е од подршка и е неопходен за воведување на поимите за функција, лимес и извод кои се неопходни во скоро сите предмети од повисоки години." });
            response.Add(new Course() { CourseName = "Дискретна Математика 1", Semester = 1, CourseDescription = "Да се запознае студентот со основните елементи од дискретната математика која е основа на информатичката технологија. Во тој контекст да научи да ги применува формалните методи на симболичката исказна и предикатна логика. Да ги користи формалните методи на симболичката логика за моделирање на ситуации од реалниот живот вклучувајќи ги и тие од областа на компјутерските науки. Да ја објасни со примери основната терминологија на множествата, функциите и релациите, основните операции како и нивната примена. Да ги запознае и применува основните начини на докажување и методите на математичката индукција. Да се запознае со основните својства на целите броеви и нивната примена." });
            response.Add(new Course() { CourseName = "Структурно Програмирње", Semester = 1, CourseDescription = "Да се воведат студентите во парадигмата на структурното програмирање, да го разберат концептот на алгоритми и да се оспособат да развиваат алгоритми, да кодират, тестираат и компајлираат програми. Ќе бидат воведени податочните типови, контролните структури, функциите, полињата и датотеките." });
            response.Add(new Course() { CourseName = "Вовед во Информатика", Semester = 1, CourseDescription = "Солидно познавање на основите на информатичко-комуникасицките технологии, нивното создавање, моментална состојба и иднината; начинот на кој функционираат сметачите, основите на Веб, обработката на сликите, видеото и анимациите; клучните области на информациско-комуникациските технологии и нивното влијание: спососност за манипулација со текст, табели, графикони, слики, аудио и видео." });
            response.Add(new Course() { CourseName = "Професионални Вештини", Semester = 1, CourseDescription = "Целта на курсот е да студентите да се стекнат со вештини потребни за академско и техничко пишување и презентирање, со водење сметка за етиката и критичкото мислење. По завршување на курсот се очекува студентот да може да изработи квалитетни академски текстови (пасус, есеј, CV, формално писмо) на англиски и македонски јазик; да разликува помеѓу различни технички текстови (спецификација, елаборат, извештај, техничка документација) и да идентификува нивни делови; да одржи 15-минутна ефективна презентација на зададена тема на англиски јазик и да одговори на прашања поврзани со презентацијата; " });
            response.Add(new Course() { CourseName = "Дискретна Математика 2", Semester = 2, CourseDescription = "Студентите да се запознаат со основните на Буловите алгебри и нивната улога и примена во информатичките технологии. Да ги совладаат основните техники на броење и истите да ги применува при решавање на практични задачи. Да научи да решава различни рекурентни равенки. Да се запознаат со матриците и нивната примена. Да ја научат основната терминологија од теоријата на графови и да ја применуваат при моделирање и решавање на практични проблеми од областа на компјутерските науки. " });
            response.Add(new Course() { CourseName = "Калкулус 2", Semester = 2, CourseDescription = "Предметот е од подршка и во него се воведуваат поимите за интеграл кај функции од една променлива, функции од повеќе променливи, парцијални изводи и двојни интеграли." });
            response.Add(new Course() { CourseName = "Објектно-Ориентирано Програмирање", Semester = 2, CourseDescription = "Целта на предметот е да го запознае студентот со основните концепти на објектно-ориентираното програмирање. За таа цел ќе бидат воведени концептите на објекти и класи, eнкапсулација, наследување и полиморфизам. Студентите ќе бидат запознаени и со хиерахијата на класи. Ќе се направат споредби на имплементациите на објектно-ориентираните концепти во различни програмски јазици. По завршување на курсот студентот ќе ги разбира принципите на објектно - ориентираното програмирање и биде оспособен за развој на програми кои ги подржуваат овие принципи." });
            response.Add(new Course() { CourseName = "Архитектура и Организација на Компјутери", Semester = 2, CourseDescription = "Разбирање на главните компјутерски архитектури, проценка на перформансите на поедините делови и компјутерскиот систем во целина." });
            response.Add(new Course() { CourseName = "Алгоритми и податочни структури", Semester =3 ,CourseDescription= "Запознавање со основните податочни структури и алгоритми кои се понатаму неопходни за работа со бази на податоци како и за други апликации. Студентот ќе биде оспособен за користење и развој на структури и алгоритми со линеарни листи, стебла, графови како и и индекси за пребарување. Исто така ќе биде оспособен за имплемнтација на различните архетипи на алгоритми што се користат во практичната имплементација на многу софтверски решенија. " });
            response.Add(new Course() { CourseName = "Компјутерски мрежи", Semester = 3, CourseDescription = "Вовед во основните концепти на компјутерските мрежи. Студентот ќе се здобие со знаења поврзани со мрежната архитектура, мрежните протоколи и дизајн на мрежи. Студентот ќе се запознае со главните компоненти и апликации на TCP/IP свитата од протоколи." });
            response.Add(new Course() { CourseName = "Веројатност и статистика", Semester = 3, CourseDescription = "Да се воведат основните концепти од веројатност и статистичко анализа со дискусија на примените во компјутерските науки. Да се оспособат студентите за успешно следење на стручните предмети во кои се применуваат елементи од теорија на веројатност и статистика." });
            response.Add(new Course() { CourseName = "Оперативни системи", Semester =4 , CourseDescription = "Студентот ќе биде воведен во основните градбени блокови на модерните оперативни системи преку нивна конкретна реализација во Windows и UNIX-like системите." });
            response.Add(new Course() { CourseName = "Вештачка интелигенција", Semester =4 , CourseDescription = "Способност да се одреди кои проблеми се решаваат со примена на методите на интелигентните системи, да се одреди најсоодветниот начин за претставување на соодветниот проблем и проблемот оптимално да се реши. " });
            response.Add(new Course() { CourseName = "Софтверско инженерство", Semester =4 , CourseDescription = "Целта на предметот е запознање со: методологиите за дизајн и имплементација на софтверски системи преку анализа на барањата, развој и анализа на дизајнот, имплементацијата, интеграцијата и тестирањето на софтверот; анализа на проблем за развој на софтвер, дизајнирање на модуларна структура на решението која го решава проблемот и анализа и евалуација на алтернативи; имплементација на ефикасни и исправни модули, нивна интеграција и тестирање, планирање и водење на софтверските проекти. " });
            response.Add(new Course() { CourseName = "Менаџмент информациски системи", Semester =5 , CourseDescription = "По завршувањето на предметот се очекува студентот да ги разбира и има продлабочено знаење во примена на модели и техники за управување со менаџмент информациски системи, да има продлабочено знаење за целите на бизнис и е-бизниссистемите, даимазнаењедавоспостави дигитална организација, да има продлабочено знаење за пристапите за имплементација на масовни ИС, да има широко познавање за определување клучни апликации и парадигми во една компанија, да ги знае тековните состојби во дигиталната ера, да знае да примени ИС во носење стратегиски одлуки, да има основно знаење за етичко однесување како ИТ менаџер и да знае да примени рамки за сигурност кај ИС." });
            response.Add(new Course() { CourseName = "Микропроцесорски системи", Semester = 5, CourseDescription = "Запознавање со структурата на 16 битни микропроцесори, интегрирани компоненти за поврзување со влезно/излезни уреди, програмирање со асемблер. Познавање на основите на архитектурата и организацијата на микропроцесорите како и техниката на нивно програмирање.Сличности и разлики на микропроцесори со микроконтролери. " });
            response.Add(new Course() { CourseName = "Бази на податоци", Semester = 5, CourseDescription = "Запознавање на студентот со основните концепти за работа со бази на податоци, начините на нивно моделирање и имплементирање, како и работа со прашалните јазици. Студентот ќе биде способен да моделира бази на податоци преку семантичко и релациско моделирање и процес на нормализација, ќе знае практично да го применува SQL стандардот за креирање, одржување и манипулација на релациските бази на податоци, ќе се здобие со воведни знаења за креирање на апликации на бази податоци. " });

            //Common Selectives
            //2 Semester
            response.Add(new Course() { CourseName = "Основи на Веб дизајн", Semester = 2 , CourseDescription = "По комплетирање на курсот кандидатите се очекува студентите да добијат воведни знаењаза развој на веб страници со современ дизајн, употреба на HTML и каскадни стилови." });
            response.Add(new Course() { CourseName = "Компјутерски компоненти", Semester = 2, CourseDescription = "Познавање на структурата на компјутерските системи, хардверските компоненти, поврзувањето и начинот на работа, карактеристиките и стандардите што се употребуваат." });
            //3 Semester
            response.Add(new Course() { CourseName = "Формални јазици и автомати", Semester = 3, CourseDescription = "Оспособеност за користење на формалните модели на пресметливост како основа за теорија и пракса на програрамските јазици, компајлери, како и за пратење на повисок курс од теоријата на пресметливоста. Запознавање со јазици, регуларни и контекстно слободни јазици, конечни автомати и push down автомати, граматики и врската меѓу определен вид на автомати и јазици." });
            response.Add(new Course() { CourseName = "Напредно програмирање", Semester = 3, CourseDescription = "Да се воведат студентите во парадигмата на генеричкото програмирање. Да се запознаат со апстрактни податочни типови, креирање на темплејт класи и функции. Да развијат вештини за употреба на колекции на податоци (вектори, редови, листи, множества и речници). На крај се очекува студентите да можат да ги аплицираат концептите на шаблони за објектно- ориентиран развој на софтвер при моделирање на некој специфициран проблем во робусна објектно-ориентирана програма. Студентите ќе бидат запознаени со техниките за развивање на софтвер во интегрирана развојна околина." });
            response.Add(new Course() { CourseName = "Логичко и функционално програмирање", Semester = 3, CourseDescription = "Целта на предметот е да се совладаат основните концепти на логичко и функционално програмирање. Студентите ќе можат да развиваат програми со кои се решаваат проблеми користејќи декларативно и функционално програмирање. Содржината/темите кои се обработуваат во предметот претставуваат добра основа/програмска пракса за проблеми од доменот на вештачка интелигенција/интелигентни системи" });
            response.Add(new Course() { CourseName = "Интерактивни апликации", Semester =3 , CourseDescription = "Запознавање со основните елементи на и развој на кориснички интерфејси. Разбирање на основните типови на корисничка интеракција. По завршување на курсот се очекува студентот да демонстрира познавање на основните видови корисничка интеракција и принципите за нивно дизајнирање, и да може самостојно да развива интерактивни апликации со користење на програмски алатки следејќи ги научените принципи. " });
            response.Add(new Course() { CourseName = "Интернет програмирање", Semester = 3, CourseDescription = "Целта на курсот е да овозможи запознавање на студентите со основните на програмирањето на интернет клиентската страна. Во таа насока студентите ќе бидат запознаени со дел од програмските јазици и технологиите за пишување програми што се извршуваат на клиентската страна. По завршување на курсот се очекува студентот да може да развива интерактивни веб-страници со користење на компјалирани и скриптирачки јазици. " });
            response.Add(new Course() { CourseName = "Калкулус 3", Semester = 3, CourseDescription = "Предметот опфаќа методи за решавање на диференцијални равенки од прв и втор ред, нумеричкото решавање на повеќе математички проблеми, како и примена на некои позначајни математички трансформации во инженерството." });
            response.Add(new Course() { CourseName = "Линеарна алгебра", Semester = 3, CourseDescription = "Да им се овозможи на студентите на комјутерските науки вовед во вектори и матрици и нивната примена во апликации од областа на информатиката. Да се научат концептите и методите на линеарната алгебра и како истите можат да се применат при решавање на пресметковни проблеми кои се јавуваат во компјутерските науки." });
            //4 Semester
            response.Add(new Course() { CourseName = "Теорија на информации со дигитални комуникации", Semester = 4, CourseDescription = "Студентите ќе бидат запознаени со квантитативната теорија на информации и нејзината примена во надежни и ефикасни комуникациски системи. Дополнително ќе бидат запознаени со математичкиот модел на комунникацискиот систем." });
            response.Add(new Course() { CourseName = "Кориснички интерфејси", Semester = 4, CourseDescription = "Целта на курсот е студентите да ја разберат потребата од дизајнирање ефикасна комуникација меѓу компјутерот и корисниците. По завршување на курсот се очекува студентот да демонстрира познавање на сите аспекти што го дефинираат концептот на корисничките интерфејси, да знае да моделира и имплементира кориснички интерфејси за апликации согласно барањата на корисниците и расположливата опрема и да знае да тестира и евалуира интерфејси на постоечки системи. " });
            response.Add(new Course() { CourseName = "Алгоритми и сложеност", Semester = 4, CourseDescription = "Овој предмет ќе го оспособи студентот со напредни позанавања за креирање и анализа на алгоритми имајќи ги предвид анпредните алгоритамски решенија потребни за напредни изучување на поглом број области од информатичката технологија." });
            response.Add(new Course() { CourseName = "Јазици за опис на хардвер", Semester =4 , CourseDescription = "Воведување во јазиците за опис на хардвер како што се: SystemC, VHDL и Verilog. Користење на јазиците за опис на хардвер за опис и синтеза на логички кола во процесот на автоматизиран дигитален дизајн. Студентот детално ќе се запознае со процесот на синтеза на дигитално интегрирано коло, почнувајќи од HDL код до ниво на силиконска низа од порти." });
            response.Add(new Course() { CourseName = "Дигитална електроника", Semester =4 , CourseDescription = "Запознавање со фундаменталните типови на електронски елементи, принципот на работа, и нивните теоретски модели. Анализа и дизајн на логички кола и засилувачи. " });
            response.Add(new Course() { CourseName = "Основи на компјутерската графика", Semester =4 , CourseDescription = "Запознавање со теориски основи и концепти на 2D и 3D компјутерска графика, геометриско моделирање, трансформации, рендерирање и генерирање криви и површини со помош на сплајнови. Практична реализација со помош на OPEN GL библиотеки, графички софтверски пакети од тип MAYA, 3Д Max.. и сл. По завршување на курсот се очекува студентот да демонстрира познавање на теориските основи и концепти на 2Д и 3Д компјутерската графика, да користи OpenGLбиблиотека и графички софтверски пакети за практична реализација на проблеми од компјутерската графика." });
            response.Add(new Course() { CourseName = "Случајни процеси", Semester =4 , CourseDescription = "Да се оспособат студентите да моделираат случајни процеси за реални ситуации. " });
            response.Add(new Course() { CourseName = "Обработка на слики", Semester =4 , CourseDescription = "По завршување на курсот се очекува студентот да ги владее и користи основните алатки и методи за обработка на слики. " });
            response.Add(new Course() { CourseName = "Интернет технологии", Semester = 4, CourseDescription = "Познавање на механизмите кај HTTP протоколот. Запознавање со платформи за развој на интернет апликации. Креирање и развој на веб апликции. Креирање и користење на веб сервиси. " });
            response.Add(new Course() { CourseName = "Визуелно програмирање", Semester = 4, CourseDescription = "Со завршување на овој курс се очекува студентите да се запознаени со техниките за развивање на софтвер во напредна интегрирана развојна околина користејќи модерен објектно-ориентиран програмски јазик, дизајнирање на богати графички кориснички интерфејси и откривање и отстранување на грешки во истата.Се очекува студентите да бидат оспособени за развој на настански водени апликации, развој на графички кориснички интерфејси, напредни форми за внесување на податоци, кориснички дефинирани контроли и креирање на инсталациски пакети." });
            //5 Semester
            response.Add(new Course() { CourseName = "Дизајн и архитектура на софтвер", Semester = 5, CourseDescription = "Целта на курсот е студентите да ги научат главните концепти на објектно ориентирана анализа и дизајн. Да се запознаат со техниките на рефакторирање, шаблоните за дизајн и различните архитектури на софтвер. По завршувањето на курсот кандидатите ќе можат да ги идентификуваат ограничувањата и проценат квалитетите на софтверските системи. За конкретна софтверска спецификација ќе можат да ја проценат нејзината комплетност и конзистентност, како и да дизајнираат софтверска архитектура во согласност со дадените барања. " });
            response.Add(new Course() { CourseName = "Машинско учење", Semester = 5, CourseDescription = "Целта на курсот е студентите да се запознаат со основите на модерните техники од областа на машинско учење. По завршувањето на курсот кандидатите: ќе имаат продлабочени знаења за напредните технологии и методи за машинско учење; ќе можат да разберат, анализираат и формулираат генерални проблеми од областа на машинско учење; ќе можат успешно да применат алгоритми за машинско учење при решавање на реални проблеми; ќе можат да конципираат, анализираат, реализираат и проценат перформанси на систем за машинско учење. " });
            response.Add(new Course() { CourseName = "Пресметување со високи перформанси", Semester =5 , CourseDescription = "По завршувањето на курсот се очекува студентот да има познавање на архитектурите со високи пресметувачки перформанси. Да ги разбира системите кои пресметуваат со високи перформанси и да стекне напредни знаења за забрзување на алгоритмите со нивна анализа и трансформација врз основа на расположивата хардверска инфраструктура и посебен осврт на процесорот и мемориската хиерархија." });
            response.Add(new Course() { CourseName = "Мултимедиски системи", Semester = 5, CourseDescription = "Запознавање на студентот со основните концепти за работа со мултимедиските податоци, начините на нивно моделирање и имплементирање и манипулација со истите. Студентот ќе биде способен да моделира мултимедиски податоци, ќе знае практично да го применува содржински-базираното пребарување на мултимедиските податоци, и ќе се здобие со воведни знаења за креирање на апликации базирани на мултимедиските содржини." });
            response.Add(new Course() { CourseName = "Визуелизација", Semester = 5, CourseDescription = "Предметот треба да овозможи запознавање на студентите со концептот на вузуелизација на податоци, избор на техники и алгоритми за визуелизација на различни податочни множества, и нивна програмска реализација. По завршување на курсот се очекува студентот да демонстрира познавање на концептот на визуелизација на податоци, да знае да избере и да реализира алгоритми за визуелизација на различни видови податоци програмски и со користење на алатки за визуелизација." });
            response.Add(new Course() { CourseName = "Системи на знаење", Semester = 5, CourseDescription = "Целта на курсот е студентите да ги научат главните концепти на експертните системи и нивната архитектура. Да се запознаат со методите, техниките и системите за поддршка за донесување на одлуки како и анализа на одлуките. Да се запознаат со техниките за стекнување на знаење и репрезентација на знаење. По завршувањето на курсот кандидатите: ќе имаат продлабочени знаења за експертните системи; ќе можат да моделираат експертни системи кои се базираат на цврста и непрецизна логика, правила на одлучување и невронски мрежи како и да креираат кориснички профили." });
            response.Add(new Course() { CourseName = "Дистрибуирани системи", Semester = 5, CourseDescription = "Целта на курсот е студентите да се запознаат со модерните архитектури на дистрибуирани системи како и на моделите на меѓу процесни комуникации во дистрибуирани комјутерски системи. По завршување на курсот се очекува студентот да демонстрира познавање на принципите за проектирање и развој на клиент сервер базирани решенија на елементарно ниво со користење на современи архитектури за развој на дистрибуирани комјутерски системи" });
            response.Add(new Course() { CourseName = "Дигитализација и е-презентација", Semester = 5, CourseDescription = "Целта на предметот е да се научат процесот и техниките за дигитизација. Студентите треба да ги совладаат основните принципи за менаџирање со дигитални материјали и нивна презервација, како и техники и технологии за нивно презентрање." });
            response.Add(new Course() { CourseName = "Веб програмирање", Semester = 5, CourseDescription = "Развој на напредни серверски базирани веб апликации базирани на шаблони. Развој на веб апликации во облак." });
            response.Add(new Course() { CourseName = "Анализа на софтверски барања", Semester = 5, CourseDescription = "По завршувањето на предметот се очекува студентот да ги разбира и има продлабочено знаење во примена на техниките за извлекување знаење од клиентот, да ги разбира техниките за документирање на софтверски и бизнис потреби, да ги разбира и има продлабочено знаење во примената на техники за управување со промени кај софтверски и бизнис барања." });
            response.Add(new Course() { CourseName = "Вовед во роботика", Semester = 5, CourseDescription = "Во овој курс студентите се запознаваат со основните концепти на роботиката. Дадени се примери за три големи класи роботи: манипулатори, одечки роботи и роботи кои се движат на друг тип погон, пр. тркала. Студентите се воведуваат во концептите на роботско чувствување на светот преку роботските сензори. Се воведуваат во повеќе- роботски системи." });
            response.Add(new Course() { CourseName = "Криптографија", Semester = 5, CourseDescription = "Запознавање соосновните криптографски принципи и методи; изучувањенаосновнитекрипто- дизајни; практичнокористењенаизученитекриптографски алгоритми. " });
            response.Add(new Course() { CourseName = "Администрација на мрежни сервиси", Semester = 5, CourseDescription = "Целта на овој курсот е да се покријат стандардните мрежни сервиси кои се нудат на корисници во локална и глобална мрежа. Студентите ќе бидат способни да постават и управуваат стандардни мрежни сервиси. " });
            response.Add(new Course() { CourseName = "Мобилни платформи и програмирање", Semester = 5, CourseDescription = "По завршувањето на предметот се очекува студентот да ги разбира и има продлабочено знаење од мобилни оперативни системи, продлабочено знаење за програмирање нативни мобилни апликации, мобилен веб." });
            //6 Semester
            response.Add(new Course() { CourseName = "Компајлери", Semester = 6, CourseDescription = "Во овој предметот е студентите треба да го сфатат процесот на конструкција на компајлер што ќе ги надгради како програмери кои навлегле во суштината на програмските јазици. Крајната цел е студентите да конструираат компајлер." });
            response.Add(new Course() { CourseName = "Безбедност на компјутерски системи", Semester =6 , CourseDescription = "Запознавање со постапките и механизмите за заштита кај компјутерските системи од безбедносен аспект, како и постапки што се применуваат кај компјутерските системи за подигање на нивото на безбедност во однос на неовластен пристап." });
            response.Add(new Course() { CourseName = "Дигитално процесирање на сигнали", Semester = 6, CourseDescription = "Познавањето на основите и техниките на дигиталното процесирање на сигнали е важно за секој инженер кој работи на апликации каде што има процесирање на сигнали. Со курсот студентите се воведуваат во теоретските основи дигитално процесирање на сигнали: дискретизација, Фуриеова и z – трансформација. Студентите ќе стекнат и познавања од основните алатки како што се дигиталните IIR и FIR филтри. " });
            response.Add(new Course() { CourseName = "Софтверски квалитет и тестирање", Semester =6 , CourseDescription = "Целата на курсот е запознавање на студентие со потребата од тестирање на софтвер, различните техникимоделирање на софтверот и искористување на тие модели затестирање, како и практични работа натестирање, валидација и верификација на софтвер" });
            response.Add(new Course() { CourseName = "Сензорски системи", Semester = 6, CourseDescription = "Студентот ќе биде запознаен со главните предизвици со кои може да се соочи кај сензорските системи.  " });
            response.Add(new Course() { CourseName = "Вградливи компјутерски системи", Semester = 6, CourseDescription = "Познавање на различните типови микроконтролери и употреба во вградливи компјутерски системи, системи за работа во реално време и пресметки со мала моќност, оперативни системи за оваа намена, програмирање на овие системи, проектирање на мали персонални уреди, мрежно поврзување во постојна мрежна архитектура." });
            response.Add(new Course() { CourseName = "Развој на систем на чип", Semester =6 , CourseDescription = "По завршувањето на курсот се очекува студентот да знае да ги користи методологиите за развој на System-on-Chip. Да развива платформско специфични компоненти (мрежа, видео интерфејс, безжична комуникација)." });
            response.Add(new Course() { CourseName = "Роботика", Semester =6 , CourseDescription = "Студентите ќе се запознаат со основите на интелигентната роботика. Студентите ќе бидат запознаени со основните техники на моделирање на околина, на интеракцијата робот-околина, како и на интеракцијата човек-робот.Се запознаваат со начините на нивна веројатносна локализација во светот и начините на веројатносна изградба на мапите како и на истовремена локализацијана роботите и мапирање на просторот. Се дефинираат видео и аудио системите кај роботите и начините за нивно управување. На крајот на курсот се дефинира однесување кајроботи и се дава осврт на роботите кои имаат можност за учење на светот околу нив. " });
            response.Add(new Course() { CourseName = "Податочно рударство", Semester =6 , CourseDescription = "Целта на курсот е студентите да се запознаат со основите концепти и на модерните техники од областа на рударење на податоци. По завршувањето на курсот кандидатите: ќе имаат продлабочени знаења за техниките и алгоритмиза рударење на податоци како и статистичка обработка и анализа на податоците;ќе можат успешно да применат алгоритми за рударење на податоци при решавање на реални проблеми на големи податочни множества; ќе можат да конципираат, анализираат, реализираат и проценат перформанси на систем за рударење на податоци; ќе се запознаат со главните предизвици во дадената област како и домените во кои активно се истражува." });
            response.Add(new Course() { CourseName = "Напредни бази на податоци", Semester = 6, CourseDescription = "Запознавање на студентите со напредните концепти на релационите бази на податоци, неопходни при креирање, управување и одржување на базите на податоци, како и за развој на податочно ориентирани системи. Со тоа ќе се стекант со длабоки теоретски и практични знаења од областа на базите на податоци. Исто така, студентите ќе се запознат со современите текови на развој и проширување на традиционланите системи за управување на бази на податоци, а со цел да одговорат на актуелните предизвици во информатичката тероија и практика. " });
            response.Add(new Course() { CourseName = "Интелигентни системи", Semester =6 , CourseDescription = "Да се запознаат студентите со полето на Интелигентните системи, да се оспособат за решавање на проблеми надвор од концептот на процедурално и објектно ориентирано програмирање, да може да согледуваат и предлагаат решенија на реални проблеми за класификација и предвидување, да ги научат основните методи на машинското учење, основните поими и проблеми од областа на биоинформатиката, податочното рударство, процесирањето природни јазици,когнитивната наука. " });
            response.Add(new Course() { CourseName = "Развојни процеси на информациски системи", Semester = 6, CourseDescription = "Запознавање со употребата на ИТ за подобрување на квалитетот, за дизајнирање, помагање и пренесување на организациските цели и насоки. Воведување на ИС како стратешка и интегрална компонента на една организација. Дискусија и преглед на процесот за развој на ИС: развојни методологии, животен циклус, работен тек. Стриктни наспроти агилни методологии, структурни наспроти објектно ориентирани методологии. Демонстрација напримери на апликациски системи во организации вклучувајќи ERP, CRM, SCМиKN. По завршување на курсот се очекува студентот да демонстрира познавање на развојни процеси на ИС , и елементи кои се однесуваат на воведувањето и примената на методологиите. " });
            response.Add(new Course() { CourseName = "Географски информациони системи", Semester = 6, CourseDescription = "Создавање и управување со просторни (Географски) информациони систем." });    
            response.Add(new Course() { CourseName = "Паралелно програмирање", Semester = 6, CourseDescription = "Истражување на алгоритмите и техниките за програмирање на најновите паралелни платформи со споделенамеморија и со дистрибуирана меморија. Студентот ќе се запознае со теоретските и практичните (програмските) компоненти." });
            response.Add(new Course() { CourseName = "Мобилни апликации", Semester = 6, CourseDescription = "По завршувањето на предметот се очекува студентот да ги разбира и има продлабочено знаење во примена на технологиитеи алатките за oрганизирање, складирање, прибирање и обработка на податоци во дистрибуирана мобилна и сеприсутна околина." });
            response.Add(new Course() { CourseName = "Современи компјутерски архитектури", Semester =6 , CourseDescription = "Разбирање на концептите и имплементациите на современите процесори. Анализа на современите процесори. Студентот ќе биде оспособен да дизјанира, одржува и програмира компјутерски системи со современи процесори и процесирачки елементи " });
            response.Add(new Course() { CourseName = "Складови на податоци и аналитичка обработка", Semester = 6, CourseDescription = "Запознавање со oрганизацијата и манипулацијата со податоците организирани во складови на податоци, како и основните операции и алгоритми за работа со складови на податоци. Студентот ќе биде оспособен за моделирање на складови на податоци, организација и манипулација со податоците сместени во складови на податоци, изготвување на аналитички извештаи базирани на истите податоци. " });
            response.Add(new Course() { CourseName = "Електронска и мобилна трговија", Semester =6 , CourseDescription = "Студентот со завршување ќе се стекне со вештини за развој на апликации за е-трговија и м-трговија. Развој на е- бизнис планови." });
            //7 Semester
            response.Add(new Course() { CourseName = "Методологија на истражувањето во ИКТ", Semester = 7, CourseDescription = "По завршувањето на предметот се очекува студентот да ги разбира принципите на истражувачката работа, да има сознанија за идентификување на можни научно-истражувачки прашања, како и да има основни познавања од текот на научно истражувачкиот процес.  " });
            response.Add(new Course() { CourseName = "Компјутерска етика", Semester =7 , CourseDescription = "Способност да се согледаат клучните културни, општествени, правни и етички аспекти на ИКТ, влијанието на ИКТ, значењето и професионалните одговорности на ИКТ професионалците; Способност критички да се согледаат и дискутираат потенцијалните ризици што со себе ги носи ИКТ, вклучувајќи ги и последиците од нејзиниот развој врз развојот на човештвото; Стекнување информации за националните и меѓународните закони за спречување и заштита од компјутерскиот криминал." });
            response.Add(new Course() { CourseName = "Компјутерски поддржано производство", Semester = 7, CourseDescription = "Целата на курсот е запознавање на студентите со теоријата, принципите и праксата за компјутерски потпомогнато производство, основните поими за системи и модели, контрола и симулација на производни процеси." });
            response.Add(new Course() { CourseName = "Машинска визија", Semester =7 , CourseDescription = "Да се воведат студентите во основните концепти и техники во компјутерската визија. Студентите кои успешно ќе го завршат курсот ќе бидат способни за дизајнирање на ефикасни системи за компјутерска визија како: препознавање на ракопис, детекција и препознавање на лица, проценка на движење, следење на луѓе и возила, препознавање на гестови, препознавање и класификација на визуелни објекти, разбирање и анализа на сцени итн. " });
            response.Add(new Course() { CourseName = "Анализа и дизајн на ИС", Semester =7 , CourseDescription = "Запознавање на студенти со актуелните техники за дефинирање на кориснички побарувања и моделирање информационите системи. Навлегување во студија на случај на развој на ИС со користење на актуелна методологија. Оспособување за практична анализа на кориснички побарувања и креирање ефективни ОО модели со помош на UML, како јазик за комуникација во софтверско инженерство и моделирање на сите фази на развој на едедн информационен систем и негова имплементација, со нагласката на фази на анализа и дизајн. По завршување на курсот се очекува студентот да демонстрира знаење за користење на објектно ориентираниот пристап во процесот на анализа и дизајн на информационите системи со користење на стандардни објектно ориентирани нотации на UML јазик." });
            response.Add(new Course() { CourseName = "Паралелно и дистрибуирано процесирање", Semester = 7, CourseDescription = "Цел на предметот е студентите да ги совладаат методите на паралелно процесирање, можностите за паралелизација на секвенцијална програма и проблемите со кои треба да се справат во тој процес." });
            response.Add(new Course() { CourseName = "Моделирање и симулација", Semester = 7, CourseDescription = "Студентот ќе се здобие со знаења за користење на техники за моделирање со цел да го евалуира динамичкото однесување на реалните системи. Студентот ќе се оспособи со знаење за конструирање, верификација и решавање на моделите со соодветно ниво на апстракција и деталност. " });
            response.Add(new Course() { CourseName = "Обработка на природните јазици", Semester =7 , CourseDescription = "Целта на предметот е студентитеда се стекнат со основните теоретски и практични знаења за алгоритмите за обработка на природните јазици. Ќе стекнат знаења за тоа како јазичната структура и значење се репрезентираат во структури наподатоци, како овие структури и значење да се препознаат во текстуалниподатоци, и најбитно, како да изградат алгоритми кои ќе ги препознаваатвистинските одговори помеѓу големиот број опции. " });
            response.Add(new Course() { CourseName = "Напредна интеракција човек компјутер", Semester =7 , CourseDescription = "Овој предмет ги запознавастудентите со основите на комплекснатаинтеракцијакоја се одвива меѓу човекот и компјутерот. Студентите се запознаваат и со техниките за моделирање на корисници, проблеми, апликации и средини (амбиенти) како и на техники за евалуација и анализа на интелигентни интефејси. Се разгледуваатпринципи за градење посредници кои ги опфаќаат ограничувањата и во двете примарно афектиранигрупи: човекот и компјутерот. Студентите треба да научат дека корисникот е еден од главнитеелементи при креирање на компјутерскитесистеми. При тоа, се даваувид во начинот за развивање на хардверот и софтверот за различнигрупи на корисници, како и за специфичниапликацискидомени. Студентите стекнуваат познавања на принципи за проектирање на кориснички интерфејси адаптибилни на околината, интелигентни кориснички интерфејси базирани на агенти и интерфејси чувствителни на контекст, како и интелигентни решенија наменети за специфични типови на кориснички групи. " });
            response.Add(new Course() { CourseName = "Мултимедиски мрежи", Semester =7 , CourseDescription = "Модели на мултимедиски сообраќај, координација и управување со трансфер на големи количини на податоци, високо пропусни мрежи, упатувачки и транспортни протоколи, квалитет на услуги кај мултимедиски мрежи (на ниво на мрежа), мрежни мултимедиски апликации (интрнет базирана интерактивна 3Д графика, дигитална телевизија, P2P и GRID мултимедиски сервиси)." });
            response.Add(new Course() { CourseName = "Веб базирани системи", Semester =7 , CourseDescription = "Развој на напредни веб 2.0 апликации. Развој на апликации за Веб 3.0 (Семантички веб). Користење на отворени податоци. Поврзување наподатоците. " });
            response.Add(new Course() { CourseName = "Имплементација на системи со отворен код", Semester = 7, CourseDescription = "По завршување на курсот се очекува студентите да се оспособени за продуктивно учество во поголеми софтверски тимови кои работат употребувајќи технологии со отворен код. Да бидат способни за работа во програмски јазици со отворен код, да развиваат веб апликации на тие платформи. Да бидат способни да водат софтверски проект базиран на технологии со отворен код. " });
            response.Add(new Course() { CourseName = "Вовед во препознавање на облици", Semester = 7, CourseDescription = "Целта на курсот е студентите да ги научат главните концепти на методите и техниките кои се применуваат за препознавање на облици.По завршувањето на курсот кандидатитеќе бидат оспособени за дизајнирање, реализирање и имплементација на системи за автоматско препознавање на облици, проценка на нивните перформанси и нивна оптимизација. " });
            response.Add(new Course() { CourseName = "Конструкција на софтвер", Semester = 7, CourseDescription = "Целта на овој предмет е да се оспособат студентите да осознаат за деталниот софтверски дизајн, потребата од реверсен инженеринг во спфтверското инженерство." });
            //8 Semester
            response.Add(new Course() { CourseName = "Претприемништво", Semester =8 , CourseDescription = "На крајот на курсот се очекува студентот да ги разбира основите и принципите на претприемништвото и на менаџментот на мал бизнис, и да биде во состојба да: спроведе истражување во врска со претприемничка идеја, да предложи ефективни насоки за делување на постоечки претприемнички бизниси, да предложи решенија за проблеми со кои се соочуваат тие бизниси, да дизајнира конкурентен бизнис модел, да развие маркетинг план, физибилити анализа, оперативен план, финансиски план и да подготви комплетен бизнис план, и да ја подобри креативноста и иновативноста кај студентот" });
            response.Add(new Course() { CourseName = "Операциони истражувања", Semester = 8, CourseDescription = "Да го запознае студентот со областа проблеми и методи на операциони истражувања, проблеми на оптимизација на проекти и оптимално управување со проекти, со методи и техники на операцисиони истражувања поврзани со управувaчки информациски системи и информациски системи за подршка на одлучување." });
            response.Add(new Course() { CourseName = "Компјутерска анимација", Semester = 8, CourseDescription = "По завршување на курсотсе очекува студентите да се оспособени за продуктивно создавање анимации, за работа во апликации за создавање анимации и можат самостојно да моделираат, текстурираат, ригуваат, рендерираат и анимираат дигитални сцени." });
            response.Add(new Course() { CourseName = "Физички дизајн и имплементација на информациски системи 	", Semester = 8, CourseDescription = "Детално запознавање на студентите со актуелни методологии на располагање на еден систем дизајнер, за изведба на реализација и ставање во употреба на еден ИС. Изучување на актуелни софтверски алатки за дизајн на софтвер, визуелно програмирање, автоматизирано генерирање на софтверски код, автоматизирано тестирање." });
            response.Add(new Course() { CourseName = "Вовед во когнитивни науки", Semester = 8, CourseDescription = "Целта е да се разбере како работи човечкиот мозок. Студентите ќе се запознаат со теоретските и емпириските погледи кои ја дефинираат когнитивната наука. Ќе се запознаат со истражувањата за природата на менталните процеси како перцепцијата, мислењето, меморијата, фантазијата, вниманието, јазикот, интелигенцијата, донесувањето одлуки и решавањето проблеми. Студентите ќе научат кои се алатките превземени од експерименталната психологија, наука на развојот, комјутерската наука, лингвистика, визуализацијата, филозофијата, антропологијата, бихевиоризмот, неврологијата. Курсот ќе ги поврзе сите овие пристапи кои се поврзуваат во когнитивната наука." });
            response.Add(new Course() { CourseName = "Вовед во биоинформатика", Semester = 8, CourseDescription = "Студентите да се запознаат со областите и проблемите кои ги покрива биоинформатиката, да бидат во можност да вршат генска и протеинска секвенцна анализа, да користат биолошки бази податоци, да ги запознаат пресметковните методи за решавање проблеми во молекуларната биологија." });
            response.Add(new Course() { CourseName = "Управување со ИКТ проекти", Semester = 8, CourseDescription = "По завршувањето на предметот се очекува студентот да ги разбира и има продлабочено знаење во примена на техниките и методите за управување со ИКТ проекти, да има продлабочено знаење во утврдување софтверски и системски барања, познавање на метриките за следење на проекти и евалуација, да има знаење да примени техники за управување со барањата на разни проектни интересни групи, знаење за примена на тенхики за нализа на трошоци, знаење за изготвување на извештаи, познавање на практични софтверски алатки за управување со проектен циклус." });
            response.Add(new Course() { CourseName = "Виртуелизација и пресметување во облак", Semester = 8, CourseDescription = "Овој предмет ќе го оспособи студентот со основни познавања за концептот на облак и услуги во облак како и можност на имплементација на облак со отворен код" });
            response.Add(new Course() { CourseName = "Сервисно Ориентирани Архитектури", Semester =8 , CourseDescription = "Да се запознае со трета и четврта генерација на Интернет системи, да совлада алатки да создава софтвер како сервис, како и со нови предизвици и можности за решенија со пресметување во облак " });
            response.Add(new Course() { CourseName = "Дизајн на интегрирани системи", Semester =8 , CourseDescription = "Целта на курсот е студентите да се запознаат со принципите за интеграција на системи и дизајн на интегрирани информациони системи. Да ги разберат најважните технологии и пристапи кои се користат при интеграција на системи. Да научат како да се намали ризикот при имплементација и интеграција на ентерпрајз системи. " });
            //IKI Specials
            response.Add(new Course() { CourseName = "Основи на електрични кола", Semester = 1, CourseDescription = "Запознавање со основните поими и појави од електростатиката, со основните закони и теореми во теоријата на електричните кола и со некои методи за анализа на електрични мрежи со временски констатни струи и напони. Користење на основните законитости во електротехниката при решавање на конкретни проблеми во инженерството..." });
            response.Add(new Course() { CourseName = "Физика", Semester = 1 , CourseDescription = "Студентите ќе се запознаат со основните физички величини и закониод механиката, осцилаторното и браново движење, механиката на флуиди и термодинамиката. Тие ќе се стекнат со основни вештини за експериментална работа, како и за пресметување и правилно толкување на добиените резултати од областите кои се дел од содржината. Теоретските знаења на студентите ќе бидат солидна подлога за понатамошна надградба која е потребна за разбирање и моделирање на различните процеси каде што се применуваат информатиката и компјутерското инеженерство." });
            response.Add(new Course() { CourseName = "Модерна физика", Semester = 2, CourseDescription = " Студентите ќе се запознаат со основните физички величини и закониод модерната физика која ги вклучува оптиката, атомската и нуклеарната физика. Со проширување на знаењата со законите од модерната физика студентите ќе имаат поширока подлога за разбирање и употребување на физиката во информатиката и компјутерското инеженерство. " });
            response.Add(new Course() { CourseName = "Eлектротехника и компјутерски науки", Semester = 2, CourseDescription = "Запознавање со основните поими и појави од електромагнетизмот и нивно објаснување. Однесување на отпорник, кондензатор и индуктивен елемент во електрични кола со простопериодични струи и напони, електрични кола со индуктивно спрегнати елементи и трифазни електрични кола. Користење на основните законитости во електротехниката при решавање на конкретни проблеми во инженерството. Примена на електротехниката во компјутерското инженерство. " });
            response.Add(new Course() { CourseName = "Логички кола и дискретни автомати", Semester = 3, CourseDescription = "Запознавање со основните методи за анализа и дизајн на логички кола и логички мрежи, како комбинациони така и секвенцијални кола, регистри и бројачи." });
            response.Add(new Course() { CourseName = "Основи на Телекомуникации", Semester = 3, CourseDescription = "Целта на предметот е студентите да се запознаат со анализата на сигнали и нивниот пренос низ линеарни системи, типови на модулација и влијание на шумот врз модулациските техники." });
            response.Add(new Course() { CourseName = "Објектно ориентирана анализа и дизајн", Semester = 3, CourseDescription = "Запознавање со техниките за анализа, дизајн и моделирање на објектно ориентираните системи. Оспособување за практична анализа на кориснички барања и креирање ефективни ОО модели како почетна фаза на имплементацијата на ОО системот." });
            response.Add(new Course() { CourseName = "ARM Архитектура", Semester = 8, CourseDescription = "Разбирање на ARM процесорите и принципите на вградливо програмирање." });
            response.Add(new Course() { CourseName = "Биокибернетика", Semester = 8, CourseDescription = "Понатамошни проучувања на когнитивни, генетски, и хормонални системи кај живите организам." });
            response.Add(new Course() { CourseName = "Програмирање на видео игри и специјални ефетки", Semester = 7, CourseDescription = "Предметот треба да овозможи запознавање на студентите со концептот на програмирање на видео игрите и специјалните ефекти, програмските јазици и алатките за програмирање и основните програмерски техники за дизајнирање и развој на видео игри. По завршување на курсотсе очекува студентите да се запознаени со основите на програмирање видео игри и да можаѕ самостојно да ги користат OpenGL и DirectX за развој на видео игри." });
            response.Add(new Course() { CourseName = "Мрежен софтвер", Semester = 7 , CourseDescription = "Запознавање со програмирање во TCP/IP мрежна околина, програмирање на основни мрежни сервиси. Програмирање на Web сервер, апликациски сервер. Peer-to-Peer и Grid структури." });
            //MT Specials
            response.Add(new Course() { CourseName = "Маркетинг", Semester = 3, CourseDescription = "Вовед во главните елементи за развој на маркетинг стратегија и планирање на програма за маркетинг. Развој на вештини за решавање на маркетинг проблеми преку сет аналитички алатки(рамки, поими, модели и техники). Презентирање и анализа на примери и студии на случај како претпријатијата од повеќе дејности го организираат својот маркетинг. Интегрирање на е - маркетингот во вкупната маркетинг стратегија" });
            response.Add(new Course() { CourseName = "Теорија на информации со дигитални комуникации", Semester = 4, CourseDescription = "Студентите ќе бидат запознаени со квантитативната теорија на информации и нејзината примена во надежни и ефикасни комуникациски системи. Дополнително ќе бидат запознаени со математичкиот модел на комунникацискиот систем." });
            response.Add(new Course() { CourseName = "Безжични и мобилни системи", Semester = 4, CourseDescription = "Познавање и разбирање на системите за безжична и мобилна комуникација" });
            response.Add(new Course() { CourseName = "Персонални и ад хок мрежи", Semester = 5, CourseDescription = "Разбирање на архитектурата и карактеристиките на ад хок и персоналните мрежи. Дизајнирање и оптимизација на ад хок мрежи. Решавање на проблеми поврзани со конвергенција на безжични хибридни мрежи. " });
            response.Add(new Course() { CourseName = "Мобилни IP мрежи", Semester = 5, CourseDescription = "Разбирање како мобилноста може да се поддржи во IP мрежите. Познавање и работа со клучните мобилни функционалности кои коегзистираат на различни нивоа од мрежата. Донесување одлуки за избор на техники за градење на мобилен Интернет" });
            response.Add(new Course() { CourseName = "Дизајн на компјутерски мрежи", Semester =6 , CourseDescription = "Целта на овој курсот е да го оспособи студентот да работи со големи компјутерски мрежи и да обезбеди колаборативна работа на различни административни региони, како и да дизајнира различни типови компјутерски мрежи според потребите на крајните корисници. " });
            response.Add(new Course() { CourseName = "Администрирање на ИТ системи", Semester = 6, CourseDescription = "Студентот ќе се здобие со знаење за лесно и ефикасно менаџирање на IT системи, управување со традиционалните податочни центри, приватни и јавни облаци и клиентските компјутери и уреди. Студентот ќе може да се запознае и со платформи за менаџирање на повеќе хипервизори, физички ресурси и апликации. " });
            response.Add(new Course() { CourseName = "Теорија на сообраќај", Semester = 6, CourseDescription = "За инженер кој работи со мрежни технологии е корисно да има познавања од теоријата на сообраќај заради поквалитетно дизајнирање на мрежите како и подобро користење на нивните перформанси. Со овој курс студентите ќе се запознаат со основите на теоријата на сообраќај. Покрај воведувањето на во алатките и техниките за анализа на сообраќајот, студентите ќе стекнат основни знаења и за димензионирање на комуникациски системи." });
            response.Add(new Course() { CourseName = "Мрежна безбедност", Semester =6 , CourseDescription = "Целта на овој курсот е да се покријат принципите за сигурноста кај компјутерските системи и мрежи, при што студентот ќе се запознае со различни техники за напад и одбрана.Студентот ќе се запознае со техники на пишување на безбеден код" });
            response.Add(new Course() { CourseName = "Мрежи од следната генерација", Semester =7 , CourseDescription = "По завршувањето на курсот се очекува студентот да има познавање на архитектурата на мрежите од следните генерации. Да ги знае начините за кориснички пристап и технологиите за мултимедиски пренос во реално време." });
            response.Add(new Course() { CourseName = "Мрежно планирање и развој", Semester = 7, CourseDescription = "Целта на овој курс е студентите да бидат способни да ги согледаат мрежното планирање и развој на компјутерските мрежи од финансиско економски поглед како прва задача при планирањето на мрежа. " });
            response.Add(new Course() { CourseName = "Управување со мрежи", Semester = 8, CourseDescription = "По завршувањето на курсот се очекува студентот да ги разбира проблемите на управувањето со мрежи и да знае да ги применува на методите и алатките за управување со комуникациски мрежи. " });
            response.Add(new Course() { CourseName = "Моделирање и симулација на комуникациски мрежи ", Semester =8 , CourseDescription = "Запознавање со техниките, методите и моделите за симулација на комуникациските мрежи. Употреба на симулација во дизајнот и анализата на перформанси на комуникациските системи. " });
            response.Add(new Course() { CourseName = "Безжични мултимедиски системи", Semester =8 , CourseDescription = "Разбирање на проблемите кои се јавуваат при пренос на мултимедија во безжични мрежи. Познавање на IP мултимедискиот подсистем и неговата работа. Поседување на знаење за практично обезбедување на QoS на мултимедиските апликации за безжичните мобилни уреди. Познавања за карактеристиките на мултимедискиот сообраќај." });
            //PET SPECIFICS
            response.Add(new Course() { CourseName = "Вовед во интернет", Semester = 1, CourseDescription = "По комплетирање на курсот кандидатите се очекува да бидат запознаени со основите на структурата и начинот на работа на глобалната мрежа и да добијат воведни знаења за можностите и начините на користење на основните интернет сервиси, како и за дизајнирање и изработка на статички и едноставни динамички WWW страни." });
            response.Add(new Course() { CourseName = "ИТ системи за учење", Semester = 3, CourseDescription = "По успешното завршување на овој предмет, студентот ќе биде во состојба да ги: разбере улогата и новите трендови кај технолошки потпомогнатите околини за учење, да го вреднувапроцесот на учење во технолошки потпомогнатите околини за учење, да ја вреднува ефективноста на курсевите кои се изведуваат со помош на системи за технолошки потпомогнато учење, да ги идентифицира потребите на ученикот во технолошки потпомогнатите околини за учење, да го разбере преминот од традиционалните во технолошки потпомогнатите околини за учење и самостојно да создаде средина за колаборативно создавање наставни содржини." });
            response.Add(new Course() { CourseName = "Концепти на информатичко општество", Semester = 4, CourseDescription = "Целта на курсот е да се запознаат студентите со теориите и пристапите кои ја анализираат улогата на информатичката технологија, медиумите и знаењето во модерното општество. " });
            response.Add(new Course() { CourseName = "Медиуми и комуникации", Semester = 4, CourseDescription = "По завршувањето на предметот се очекува студентот да ги разбира основните поими од комуникатологијата како наука, како и да има продлабочено знаење во примена на постоечките техники и сознанија за подобрување за комуникацијата помеѓу две заедници. Посебен осврт ќе биден даден на новитемедиуми и начинот на кој тие влијаат во различни општествени сфери. " });
            response.Add(new Course() { CourseName = "Управување со техничка поддршка", Semester = 5, CourseDescription = "По завршувањето на курсот се очекува студентот да ги разбира методите и системите за решавање на ИТ проблемите преку обезбедување на квалитетна техничка поддршка. " });
            response.Add(new Course() { CourseName = "е-Влада", Semester = 6, CourseDescription = "Целта на курсот е студентите да се запознаат со процесите и технологијата на еВлада.По завршувањето на курсот кандидатите: ќе имаат продлабочени знаења за организацијата и процесите на испорака на информации и сервиси со користење на еТехнологии на граѓаните и правните субјекти во општеството; тековните предизвици и трендови во имплементација на еВладини услуги; проценка на потребите, анализа, планирање, имплементација и менаџирање на систем за испорака на е-сервиси." });
            response.Add(new Course() { CourseName = "Моделирање на бизнис процеси ", Semester = 6, CourseDescription = "По завршувањето на предметот се очекува студентот да ги разбира и има продлабочено знаењеза типови бизнис процеси и нивна поврзаност со ИС, ќе имаат продлабочено знаењево иденфикување, моделирање и мапирање разни типови  бизнис процеси, ќе знаат да применат алатки и јазицизана моделирањена бизнис процеси  преку соодветни дијаграми, ќе  имаат познавање од принципите  за подобрување на тек на процеси, ќе имаат познавање од концептите  за податочна размена и интероперабилност." });
            response.Add(new Course() { CourseName = "Методологија на истражувањето во ИКТ", Semester = 7, CourseDescription = "По завршувањето на предметот се очекува студентот да ги разбира принципите на истражувачката работа, да има сознанија за идентификување на можни научно-истражувачки прашања, како и да има основни познавања од текот на научно истражувачкиот процес.  " });
            response.Add(new Course() { CourseName = "Иновации во ИКТ", Semester = 7, CourseDescription = "Разбирање на иновативноста. Стекнување на иновативни вештини. Примена на ИКТ за креирање на иновации. Креирање на иновации во ИКТ." });
            response.Add(new Course() { CourseName = "Физички дизајн и имплементација на информациски системи 	", Semester =8 , CourseDescription = "Детално запознавање на студентите со актуелни методологии на располагање на еден систем дизајнер, за изведба на реализација и ставање во употреба на еден ИС. Изучување на актуелни софтверски алатки за дизајн на софтвер, визуелно програмирање, автоматизирано генерирање на софтверски код, автоматизирано тестирање." });
            response.Add(new Course() { CourseName = "Неструктурирани бази на податоци", Semester =8 , CourseDescription = "Целта на курсот е студентите да се запознаат со неструктурираните и полуструктурираните типови на податоци, нивната организација и чување, како и техниките за манипулација и обработка на истите. Исто така студентите ќе бидат запознаени и со базите на податоци кои не подлежат на релациониот модел" });
            response.Add(new Course() { CourseName = "Бизнис и менаџмент ", Semester = 2, CourseDescription = "Развој на менаџерски способности: техничка, концепциска, комуникациска, аналитичкасвојување на рамки, поими,од областа на менаџментот. Презентирање и анализа на примери, студии на случај и најдобри менаџмент практики од повеќе бизнис области" });
            //ики специфик 
            response.Add(new Course() { CourseName = "Компјутерски архитектури", Semester = 4, CourseDescription = "Разбирање на архитектурата на еден компјутерски систем, идентификација на неговите составни делови, проценка на перформансите на компјутерскиот систем и неговите поединечни делови. Разбирање на машинскиот јазик, асемблерот и мемориската организација на си" });
            
            return response;
        }


        private void FillProgramsCourses(SchoolContext context)
        {
            //Fills ProgramsCourses table with relations about programs and courses interaction
            //context.ProgramsCourses.Add(new ProgramsCourses() {CourseId= ,ProgramId= ,IsMandatory= });
            //Mandatory KNI 160-177 ids, ismandatory = true programId = 25
            for (int i = 160; i <= 177; i++) {
                context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 25, CourseId = i, IsMandatory = true });
            }
            //SELECTIVE KNI 178-242 ids, ismandatoriy = false, programid = 25
            for (int i = 178; i < 242; i++)
            {
                context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 25, CourseId = i, IsMandatory = false });
            }

            ////OTHERS   243-289 ismandatory=false programid=25
            for (int i = 243; i < 289; i++)
            {
                context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 25, CourseId = i, IsMandatory = false });
            }
            ////---------------------------------------------------------------------------------------------------------
            ////Mandatoiry PET    
            ////1&2    
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 161, IsMandatory = true });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 162, IsMandatory = true });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 163, IsMandatory = true });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 164, IsMandatory = true });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 165, IsMandatory = true });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 289, IsMandatory = true });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 169, IsMandatory = true });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 170, IsMandatory = true });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 264, IsMandatory = true });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 172, IsMandatory = true });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 174, IsMandatory = true });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 175, IsMandatory = true });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 177, IsMandatory = true });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 202, IsMandatory = true });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 228, IsMandatory = true });
            ////Selective PET
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 160, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 166, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 171, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 178, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 179, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 180, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 181, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 182, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 183, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 184, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 185, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 186, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 187, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 188, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 189, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 190, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 191, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 192, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 193, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 194, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 195, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 196, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 197, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 198, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 199, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 200, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 201, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 203, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 204, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 205, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 206, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 207, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 208, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 209, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 210, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 211, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 212, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 213, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 214, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 215, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 216, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 217, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 218, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 219, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 220, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 221, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 222, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 223, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 224, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 225, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 226, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 227, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 229, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 230, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 231, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 232, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 233, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 234, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 235, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 236, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 237, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 238, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 239, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 240, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 241, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 26, CourseId = 242, IsMandatory = false });
            ////Mandatory IKI         191
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 160, IsMandatory = true });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 162, IsMandatory = true });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 253, IsMandatory = true });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 254, IsMandatory = true });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 164, IsMandatory = true });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 166, IsMandatory = true });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 167, IsMandatory = true });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 255, IsMandatory = true });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 256, IsMandatory = true });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 169, IsMandatory = true });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 257, IsMandatory = true });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 165, IsMandatory = true });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 191, IsMandatory = true });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 170, IsMandatory = true });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 171, IsMandatory = true });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 177, IsMandatory = true });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 172, IsMandatory = true });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 173, IsMandatory = true });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 265, IsMandatory = true });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 176, IsMandatory = true });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 203, IsMandatory = true });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 269, IsMandatory = true });
            ////SELECTIVE IKI         
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 178, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 179, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 180, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 181, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 182, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 183, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 184, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 185, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 186, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 187, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 188, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 189, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 190, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 191, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 192, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 193, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 194, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 195, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 196, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 197, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 198, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 199, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 200, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 201, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 202, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 204, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 205, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 206, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 207, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 208, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 209, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 210, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 211, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 212, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 213, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 214, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 215, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 216, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 217, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 218, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 219, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 220, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 221, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 222, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 223, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 224, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 225, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 226, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 227, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 228, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 229, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 230, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 231, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 232, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 233, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 234, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 235, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 236, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 237, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 238, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 239, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 240, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 241, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 242, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 243, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 244, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 245, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 246, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 247, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 248, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 249, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 250, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 251, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 252, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 258, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 259, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 260, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 261, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 262, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 263, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 264, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 266, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 267, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 268, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 270, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 271, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 272, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 273, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 274, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 275, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 276, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 277, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 278, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 279, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 280, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 281, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 282, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 283, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 284, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 285, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 286, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 287, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 288, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 27, CourseId = 289, IsMandatory = false });

            ////MANDATORY MT          
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 160, IsMandatory = true });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 161, IsMandatory = true });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 162, IsMandatory = true });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 163, IsMandatory = true });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 164, IsMandatory = true });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 165, IsMandatory = true });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 166, IsMandatory = true });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 167, IsMandatory = true });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 168, IsMandatory = true });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 169, IsMandatory = true });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 170, IsMandatory = true });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 172, IsMandatory = true });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 269, IsMandatory = true });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 276, IsMandatory = true });
            // SELECTIVE MT
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 178, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 179, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 180, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 181, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 182, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 183, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 184, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 185, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 186, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 187, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 188, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 189, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 190, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 191, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 192, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 193, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 194, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 195, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 196, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 197, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 198, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 199, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 200, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 201, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 202, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 204, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 205, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 206, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 207, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 208, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 209, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 210, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 211, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 212, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 213, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 214, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 215, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 216, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 217, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 218, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 219, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 220, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 221, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 222, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 223, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 224, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 225, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 226, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 227, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 228, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 229, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 230, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 231, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 232, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 233, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 234, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 235, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 236, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 237, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 238, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 239, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 240, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 241, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 242, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 243, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 244, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 245, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 246, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 247, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 248, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 249, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 250, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 251, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 252, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 258, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 259, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 260, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 261, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 262, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 263, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 264, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 266, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 267, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 268, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 270, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 271, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 272, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 273, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 274, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 275, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 277, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 278, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 279, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 280, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 281, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 282, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 283, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 284, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 285, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 286, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 287, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 288, IsMandatory = false });
            context.ProgramsCourses.Add(new ProgramsCourses() { ProgramId = 28, CourseId = 289, IsMandatory = false });


        }
    }
}
